# What is Juju?

## A brief history of Systems Automation

Systems automation tooling has been around for a long time. Puppet was founded a decade ago, Chef 7 years ago, Ansible 4 years ago. Software deployment time can be dramatically slashed if an IT department uses(and reuses) code instead of human interaction with the servers themselves. Deploying software automatically also reduces the chance of mistakes being introduced into the deployment, Systems Administrators can easily test the deplyment, test for failure, test for success, it makes the whole deployment routine more robust and much less likely to fail.

In ensuring seamless deployment, users get faster access to products, SA's can spend their time working on more meaningful tasks instead of patching production code, which increases the value of the IT department within a business.

### TODO MORE SYSTEMS AUTOMATION HISTORY

## Application Modelling vs Systems Orchestration

The key to Juju is the application modelling paradigm. When designing systems with Puppet for example, the process is very granular, when designing systems with Juju the application as a whole is king and where you place it and how that is done comes second. Let me give you an example:

If I were to deploy MySQL with Puppet, I would create the various configuration files for my server and add my MySQL puppet module declaration to one of my Puppet files. I might then decide that I want to install MySQL on an EC2 node, so I head over to Amazon, spin up my node, install Puppet onto that server, fetch my Puppet declarations and run Puppet on it. Of course that describes a very simple single node system with no Puppet master, but its perfectly viable.

In comparison with Juju I can do `juju bootstrap myec2controller aws/eu-west-1 && juju deploy mysql` and that is it, in 2 commands I've created a place to model my applications and told it to launch a MySQL node in that control space.

Of course thats a very simple example, the power of Juju comes from its relations and the metadata passed over those relations. The relations allow different pieces of software to communicate with one another in predefined manner. For example, if I connect MySQL to my webapp, I would like my webapp to realise this connection has taken place and have it seed a MySQL database with a default schema and create a username and password for that database, this is all perfectly viable using Juju. If my app is going to seed the database, the MySQL charm needs to know that there is a service wanting to use MySQL and it has to tell that service how to connect to it.

I could take this further and say that I would like my app to run on a m4.medium and MySQL to run on m4.xlarge, this allows me to model my application on different hardware with the minimum of fuss.

Juju allows us to model a number of different aspects of operations. It allows us to model raw materials, it doesn't matter what I deploy, it could be a deb file from apt, it could be a tar ball from sourceforge, it could be an existing puppet module you just want to abstract away. Similarly it allows us to model the operations themselves. What is the process for installation? What happens when I remove the software? What happens if people want to run more than one instance of my software? What ports are available to end users? And so on. Charms also let me model that relation, so what happens if I want to be able to monitor it? I may not know what monitoring software is going to be connected, but I can tell it useful information via the relation API. All theses models do is allow us to describe how we want our application to look, how we want it to interact with other applications and how we want it to scale on underlying hardware. It's like painting a picture with systems operations.

Another aspect of the Juju deployment is its lack of interest in the underlying hardware. It's not container based, so there are no application containers with lots of code pre installed. As long as you can provide an image for the the operating system the charm was built for, it will install and run pretty much anywhere. Out of the box there is support for a lot of the mainstream cloud providers but there is also support for the manual provider and the LXD Local provider. Should you want to deploy your applications on to systems that already exist or to a cloud service there is no support for, you could choose to use the manual provider and deploy the applications to servers available anywhere in the world, as long as it has access to SSH, Juju is happy. LXD Local is fantastic for local development, using LXD containers on a local server you can spin up entire environments inside multiple containers to prototype the scalablility, networking and more, ensuring when you deploy your application to the production hardware, the charms deploy as expected.

The charm ecosystem allows fully utilise the build, development and deployment cycles, whilst maximising reuse and reusability because of the lack of requirements on physical infrastructure.

## Getting started with Juju

### Installing the client

Since the Juju client will run on just about any operating system, getting started is really simple, but there are a few prerequisites.
If you're running Juju on Ubuntu the installation is as simple as:

    apt-get install juju

If you're running Juju on Fedora, Arch or another Linux distribution that supports the Snap package format you can install the Snap Daemon then run:

    snap install juju --devmode --beta

On Mac you can install via Brew:

    brew install juju

### Local developement with LXD

For those of us who use the Ubuntu Xenial or later operating system, we can leverage the LXD container technology to test Juju locally using LXD. To do this we need to install it so:

    apt-get install lxd
    newgrp lxd

### Mediawiki in 4 commands

So we have Juju installed but not currently doing anything, so to get started and show the power of Juju we will deploy a Wikimedia stack to our local computer for this I'm going to leverage my LXD installation. By using LXD not only do I get to deploy a full stack into seperate machines, it also means I can wipe down what I deploy cleanly without leaving installed files and crud all over my laptop when I'm done.

First up we need to bootstrap a controller:

    juju bootstrap lxd lxd

What we are doing here is starting a controller node inside a LXD container. This node will manage all the Juju charms we deploy to the platform. Of course the power of Juju means it doesn't have to be LXD, it could be EC2, Azure, MAAS or something else, we're just using LXD as it offers conveniance and zero cost.

Whilst the bootstrap happens you should see it downloading a cloud image for LXD. Once this is done it will then fetch the Juju GUI and bootstrap the node. Once the bootstrap is finished you will then be able to write:

    juju status

and it will print out the status of the LXD controller, which of course is empty because you haven't deployed a workload to it.

To deploy our Mediawiki stack to Juju we can then run:

    juju deploy wiki-simple
    watch juju status

This may take some time depending on the speed of your connection. This time instead of using a Xenial image, LXD will download a Trusty image because the charms were configured to run on Ubuntu Trusty, once this has been done the image will be cached so the next time you run LXD the startup will be instant. When this is done you will see the Juju Units being assign IP addresses and the messages start to change as the charms progress through their installation routine.

When the installation is complete the message field will turn blank which indicates these charms are ready. To check we can now visit the IP address of the wiki/0 unit in a browser and we should be able to see the MediaWifi landing page:


So in this little tutorial we have started up Mediawiki and connected it to MySQL automatically, the fact Mediawiki is running tells us the database connection has been configured and the platform is setup correctly, even though we've not written a line of code or set any database usernames or passwords whilst running the install. Not bad for a start and of the 4 commands above only 2, the bootstrap and the deploy command are actually required.

So lets take this a little further. First of all we will remove the bundle of charms we have deployed:

    juju remove-application wiki
    juju remove-application mysql

This will destroy the machines, containers in our case, that the applications reside on.

Next we will deploy the wiki-scalable bundle, this is designed to offer a scalable Wiki service and contains an extra Memcached instance, MariaDB instead of MySQL and is fronted by HAProxy:

    juju deploy wiki-scalable
    watch juju status

This time you will see 4 units start by default, each with their own IP address and ports available and again you can navigate to the Wiki IP address and see the Wiki availble. But this is a `scalable` Wiki and so its fronted by HA Proxy. If we visit the IP address of the unit named loadbalancer/0 we can see the Wiki landing page the as well. Once again we've written no code, HA Proxy just knows of the Wiki availablilty by utilising the Juju hooks and inter charm relations.

We can easily demonstrate Juju's scaling ability by running:

    juju add-unit wiki
    watch juju status

You will see in the status page Juju start another Wiki unit named wiki/2 and after a short period of time that unit will become ready. Once again, because of the relations between charms, you will see that the charm becomes available and the loadbalancer starts using the additional unit to balance the load. But how do you prove that? We can shut down the original Wiki node:

    juju remove-unit wiki/1
    watch juju status

After a few seconds you'll see wiki/1 removed from the status because Juju has instructed LXD to shutdown that container, but because I had deployed Mediawiki in a loadbalanced manner, if I refresh my webpage Mediawiki is still available to me and my end users.

Of course not everyone wants to use a command line and Juju ships with an excellent GUI which is simple to use and see exactly what you have deployed on your cluster:

    juju gui --show-credentials

This will open your webbrowser on the landing page and print your login details out to the terminal which will allow you to copy and paste them into the login prompt. When you hit login you will be dropped into the canvas view which will display exactly what charms you have deployed.


### Key Juju Concepts We've Seen So Far

* Bootstrap - Each Juju environment needs bootstrapping, be it EC2, or LXD Local. This creates the required controller and configuration to ensure all your charms are deployed successfully.
* Charm - A piece of software along with its metadata and configuration information and code. A regular charm will define how the software is installed, which other pieces of software are allowed to `relate` to it and also what happens when those charms relate.
* Bundle - A collection of charms to ease installation of multi charm platforms.
* Unit - An instance of a charm within the Juju environment.
* Machine - A container or physical server on which charms can be installed.
* LXD - Container technology, similar to Docker but serves operating system containers instead of application containers.
